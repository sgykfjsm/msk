// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package project

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectFetcher creates a new instance of MockProjectFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectFetcher {
	mock := &MockProjectFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectFetcher is an autogenerated mock type for the ProjectFetcher type
type MockProjectFetcher struct {
	mock.Mock
}

type MockProjectFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectFetcher) EXPECT() *MockProjectFetcher_Expecter {
	return &MockProjectFetcher_Expecter{mock: &_m.Mock}
}

// FetchProjects provides a mock function for the type MockProjectFetcher
func (_mock *MockProjectFetcher) FetchProjects(ctx context.Context, page int, pageSize int) (Projects, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FetchProjects")
	}

	var r0 Projects
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (Projects, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) Projects); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Projects)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectFetcher_FetchProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchProjects'
type MockProjectFetcher_FetchProjects_Call struct {
	*mock.Call
}

// FetchProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *MockProjectFetcher_Expecter) FetchProjects(ctx interface{}, page interface{}, pageSize interface{}) *MockProjectFetcher_FetchProjects_Call {
	return &MockProjectFetcher_FetchProjects_Call{Call: _e.mock.On("FetchProjects", ctx, page, pageSize)}
}

func (_c *MockProjectFetcher_FetchProjects_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockProjectFetcher_FetchProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectFetcher_FetchProjects_Call) Return(projects Projects, n int, err error) *MockProjectFetcher_FetchProjects_Call {
	_c.Call.Return(projects, n, err)
	return _c
}

func (_c *MockProjectFetcher_FetchProjects_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) (Projects, int, error)) *MockProjectFetcher_FetchProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectStore creates a new instance of MockProjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectStore {
	mock := &MockProjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectStore is an autogenerated mock type for the ProjectStore type
type MockProjectStore struct {
	mock.Mock
}

type MockProjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectStore) EXPECT() *MockProjectStore_Expecter {
	return &MockProjectStore_Expecter{mock: &_m.Mock}
}

// ListActiveProjects provides a mock function for the type MockProjectStore
func (_mock *MockProjectStore) ListActiveProjects(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveProjects")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectStore_ListActiveProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveProjects'
type MockProjectStore_ListActiveProjects_Call struct {
	*mock.Call
}

// ListActiveProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectStore_Expecter) ListActiveProjects(ctx interface{}) *MockProjectStore_ListActiveProjects_Call {
	return &MockProjectStore_ListActiveProjects_Call{Call: _e.mock.On("ListActiveProjects", ctx)}
}

func (_c *MockProjectStore_ListActiveProjects_Call) Run(run func(ctx context.Context)) *MockProjectStore_ListActiveProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectStore_ListActiveProjects_Call) Return(strings []string, err error) *MockProjectStore_ListActiveProjects_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockProjectStore_ListActiveProjects_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockProjectStore_ListActiveProjects_Call {
	_c.Call.Return(run)
	return _c
}

// StoreProjects provides a mock function for the type MockProjectStore
func (_mock *MockProjectStore) StoreProjects(ctx context.Context, projects Projects) error {
	ret := _mock.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for StoreProjects")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Projects) error); ok {
		r0 = returnFunc(ctx, projects)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectStore_StoreProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreProjects'
type MockProjectStore_StoreProjects_Call struct {
	*mock.Call
}

// StoreProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - projects Projects
func (_e *MockProjectStore_Expecter) StoreProjects(ctx interface{}, projects interface{}) *MockProjectStore_StoreProjects_Call {
	return &MockProjectStore_StoreProjects_Call{Call: _e.mock.On("StoreProjects", ctx, projects)}
}

func (_c *MockProjectStore_StoreProjects_Call) Run(run func(ctx context.Context, projects Projects)) *MockProjectStore_StoreProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Projects
		if args[1] != nil {
			arg1 = args[1].(Projects)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectStore_StoreProjects_Call) Return(err error) *MockProjectStore_StoreProjects_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectStore_StoreProjects_Call) RunAndReturn(run func(ctx context.Context, projects Projects) error) *MockProjectStore_StoreProjects_Call {
	_c.Call.Return(run)
	return _c
}
