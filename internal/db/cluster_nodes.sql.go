// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cluster_nodes.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const markClusterNodesAsDeleted = `-- name: MarkClusterNodesAsDeleted :exec
UPDATE cluster_nodes
SET
    is_deleted = TRUE,
    deleted_at = CURRENT_TIMESTAMP
where

    cluster_id = ?
    AND node_name NOT IN(/*SLICE:node_name*/?)
    AND is_deleted = FALSE
`

type MarkClusterNodesAsDeletedParams struct {
	ClusterID string
	NodeName  []string
}

func (q *Queries) MarkClusterNodesAsDeleted(ctx context.Context, arg MarkClusterNodesAsDeletedParams) error {
	query := markClusterNodesAsDeleted
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ClusterID)
	if len(arg.NodeName) > 0 {
		for _, v := range arg.NodeName {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_name*/?", strings.Repeat(",?", len(arg.NodeName))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_name*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const upsertClusterNode = `-- name: UpsertClusterNode :exec
INSERT INTO
    cluster_nodes (
        cluster_id,
        node_name,
        component_type,
        availability_zone,
        node_size,
        storage_size_gib,
        status
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    component_type = VALUES(component_type),
    availability_zone = VALUES(availability_zone),
    node_size = VALUES(node_size),
    storage_size_gib = VALUES(storage_size_gib),
    status = VALUES(status)
`

type UpsertClusterNodeParams struct {
	ClusterID        string
	NodeName         string
	ComponentType    string
	AvailabilityZone string
	NodeSize         string
	StorageSizeGib   sql.NullInt32
	Status           string
}

func (q *Queries) UpsertClusterNode(ctx context.Context, arg UpsertClusterNodeParams) error {
	_, err := q.db.ExecContext(ctx, upsertClusterNode,
		arg.ClusterID,
		arg.NodeName,
		arg.ComponentType,
		arg.AvailabilityZone,
		arg.NodeSize,
		arg.StorageSizeGib,
		arg.Status,
	)
	return err
}
