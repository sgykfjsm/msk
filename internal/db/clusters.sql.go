// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clusters.sql

package db

import (
	"context"
	"strings"
)

const markClustersAsDeleted = `-- name: MarkClustersAsDeleted :exec
UPDATE clusters
SET is_deleted = TRUE,
    deleted_at = CURRENT_TIMESTAMP
WHERE project_id = ?
    AND id NOT IN (/*SLICE:id*/?)
    AND is_deleted = FALSE
`

type MarkClustersAsDeletedParams struct {
	ProjectID string
	ID        []string
}

func (q *Queries) MarkClustersAsDeleted(ctx context.Context, arg MarkClustersAsDeletedParams) error {
	query := markClustersAsDeleted
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ProjectID)
	if len(arg.ID) > 0 {
		for _, v := range arg.ID {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:id*/?", strings.Repeat(",?", len(arg.ID))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:id*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const upsertCluster = `-- name: UpsertCluster :exec
INSERT INTO clusters (
        id,
        project_id,
        name,
        cluster_type,
        cloud_provider,
        region,
        create_timestamp,
        tidb_version,
        cluster_status
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY
UPDATE
    project_id = VALUES(project_id),
    name = VALUES(name),
    cluster_type = VALUES(cluster_type),
    cloud_provider = VALUES(cloud_provider),
    region = VALUES(region),
    create_timestamp = VALUES(create_timestamp),
    tidb_version = VALUES(tidb_version),
    cluster_status = VALUES(cluster_status)
`

type UpsertClusterParams struct {
	ID              string
	ProjectID       string
	Name            string
	ClusterType     string
	CloudProvider   string
	Region          string
	CreateTimestamp int64
	TidbVersion     string
	ClusterStatus   string
}

func (q *Queries) UpsertCluster(ctx context.Context, arg UpsertClusterParams) error {
	_, err := q.db.ExecContext(ctx, upsertCluster,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.ClusterType,
		arg.CloudProvider,
		arg.Region,
		arg.CreateTimestamp,
		arg.TidbVersion,
		arg.ClusterStatus,
	)
	return err
}
