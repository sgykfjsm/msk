// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clusters

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClusterFetcher creates a new instance of MockClusterFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterFetcher {
	mock := &MockClusterFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterFetcher is an autogenerated mock type for the ClusterFetcher type
type MockClusterFetcher struct {
	mock.Mock
}

type MockClusterFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterFetcher) EXPECT() *MockClusterFetcher_Expecter {
	return &MockClusterFetcher_Expecter{mock: &_m.Mock}
}

// FetchClusters provides a mock function for the type MockClusterFetcher
func (_mock *MockClusterFetcher) FetchClusters(ctx context.Context, projectID string, page int, pageSize int) (Clusters, int, error) {
	ret := _mock.Called(ctx, projectID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FetchClusters")
	}

	var r0 Clusters
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) (Clusters, int, error)); ok {
		return returnFunc(ctx, projectID, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) Clusters); ok {
		r0 = returnFunc(ctx, projectID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Clusters)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, projectID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, projectID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClusterFetcher_FetchClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchClusters'
type MockClusterFetcher_FetchClusters_Call struct {
	*mock.Call
}

// FetchClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - page int
//   - pageSize int
func (_e *MockClusterFetcher_Expecter) FetchClusters(ctx interface{}, projectID interface{}, page interface{}, pageSize interface{}) *MockClusterFetcher_FetchClusters_Call {
	return &MockClusterFetcher_FetchClusters_Call{Call: _e.mock.On("FetchClusters", ctx, projectID, page, pageSize)}
}

func (_c *MockClusterFetcher_FetchClusters_Call) Run(run func(ctx context.Context, projectID string, page int, pageSize int)) *MockClusterFetcher_FetchClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClusterFetcher_FetchClusters_Call) Return(clusters Clusters, n int, err error) *MockClusterFetcher_FetchClusters_Call {
	_c.Call.Return(clusters, n, err)
	return _c
}

func (_c *MockClusterFetcher_FetchClusters_Call) RunAndReturn(run func(ctx context.Context, projectID string, page int, pageSize int) (Clusters, int, error)) *MockClusterFetcher_FetchClusters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterStore creates a new instance of MockClusterStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterStore {
	mock := &MockClusterStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterStore is an autogenerated mock type for the ClusterStore type
type MockClusterStore struct {
	mock.Mock
}

type MockClusterStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterStore) EXPECT() *MockClusterStore_Expecter {
	return &MockClusterStore_Expecter{mock: &_m.Mock}
}

// StoreClusters provides a mock function for the type MockClusterStore
func (_mock *MockClusterStore) StoreClusters(ctx context.Context, clusters Clusters) error {
	ret := _mock.Called(ctx, clusters)

	if len(ret) == 0 {
		panic("no return value specified for StoreClusters")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Clusters) error); ok {
		r0 = returnFunc(ctx, clusters)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterStore_StoreClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreClusters'
type MockClusterStore_StoreClusters_Call struct {
	*mock.Call
}

// StoreClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - clusters Clusters
func (_e *MockClusterStore_Expecter) StoreClusters(ctx interface{}, clusters interface{}) *MockClusterStore_StoreClusters_Call {
	return &MockClusterStore_StoreClusters_Call{Call: _e.mock.On("StoreClusters", ctx, clusters)}
}

func (_c *MockClusterStore_StoreClusters_Call) Run(run func(ctx context.Context, clusters Clusters)) *MockClusterStore_StoreClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Clusters
		if args[1] != nil {
			arg1 = args[1].(Clusters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterStore_StoreClusters_Call) Return(err error) *MockClusterStore_StoreClusters_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterStore_StoreClusters_Call) RunAndReturn(run func(ctx context.Context, clusters Clusters) error) *MockClusterStore_StoreClusters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterService creates a new instance of MockClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterService {
	mock := &MockClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterService is an autogenerated mock type for the ClusterService type
type MockClusterService struct {
	mock.Mock
}

type MockClusterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterService) EXPECT() *MockClusterService_Expecter {
	return &MockClusterService_Expecter{mock: &_m.Mock}
}

// FetchAndStoreClusters provides a mock function for the type MockClusterService
func (_mock *MockClusterService) FetchAndStoreClusters(ctx context.Context, projectIDs []string, pageSize int) error {
	ret := _mock.Called(ctx, projectIDs, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FetchAndStoreClusters")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int) error); ok {
		r0 = returnFunc(ctx, projectIDs, pageSize)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterService_FetchAndStoreClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAndStoreClusters'
type MockClusterService_FetchAndStoreClusters_Call struct {
	*mock.Call
}

// FetchAndStoreClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - projectIDs []string
//   - pageSize int
func (_e *MockClusterService_Expecter) FetchAndStoreClusters(ctx interface{}, projectIDs interface{}, pageSize interface{}) *MockClusterService_FetchAndStoreClusters_Call {
	return &MockClusterService_FetchAndStoreClusters_Call{Call: _e.mock.On("FetchAndStoreClusters", ctx, projectIDs, pageSize)}
}

func (_c *MockClusterService_FetchAndStoreClusters_Call) Run(run func(ctx context.Context, projectIDs []string, pageSize int)) *MockClusterService_FetchAndStoreClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClusterService_FetchAndStoreClusters_Call) Return(err error) *MockClusterService_FetchAndStoreClusters_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterService_FetchAndStoreClusters_Call) RunAndReturn(run func(ctx context.Context, projectIDs []string, pageSize int) error) *MockClusterService_FetchAndStoreClusters_Call {
	_c.Call.Return(run)
	return _c
}
